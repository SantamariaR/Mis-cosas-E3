import numpy as np

"""
Molécula de CH4
"""

print(20*'=' + '\n \tCH4\n' + 20*'=')

S_CH4 = np.array([[1, 0.2484, 0, 0, 0, 0.06328, 0.06328, 0.06328, 0.06328],
	[0.2484, 1, 0, 0, 0, 0.4948, 0.4948, 0.4948, 0.4948],
    [0, 0, 1, 0, 0, -0.2214, -0.2214, 0.4428, 0],
    [0, 0, 0, 1, 0, -0.1565, -0.1565, -0.1565, 0.4697],
    [0, 0, 0, 0, 1, 0.3835, -0.3835, 0, 0],
    [0.06328, 0.4948, -0.2214, -0.1565, 0.3835, 1, 0.1723, 0.1723, 0.1723],
    [0.06328, 0.4948, -0.2214, -0.1565, -0.3835, 0.1723, 1, 0.1723, 0.1723],
    [0.06328, 0.4948, 0.4428, -0.1565, 0, 0.1723, 0.1723, 1, 0.1723],
    [0.06328, 0.4948, 0, 0.4697, 0, 0.1723, 0.1723, 0.1723, 1]])

P_CH4 = np.array([[2.0659, -0.20184, 0, 0, 0, -0.09287, -0.09287, -0.09287, -0.09287],
	[-0.20184, 0.79067, 0, 0, 0, 0.22611, 0.22611, 0.22611, 0.22611],
	[0, 0, 0.65429, 0, 0, -0.28097, -0.28097, 0.56194, 0],
    [0, 0, 0, 0.65429, 0, -0.19868, -0.19868, -0.19868, 0.59603],
    [0, 0, 0, 0, 0.65429, 0.48665, -0.48666, 0, 0],
    [-0.09387, 0.22611, -0.28097, -0.19868, 0.48665, 0.60826, -0.11568, -0.11568, -0.11568],
    [-0.09387, 0.22611, -0.28097, -0.19868, -0.48666, -0.11568, 0.60826, -0.11568, -0.11568],
    [-0.09387, 0.22611, 0.56194, -0.19868, 0, -0.11568, -0.11568, 0.60828, -0.11568],
    [-0.09387, 0.22611, 0, 0.59603, 0, -0.11568, -0.11568, -0.11568, 0.60828]])

W_CH4 = np.matmul(P_CH4,S_CH4)

print('Cantidad de electrones esperada:\t', 10) # 4*1 + 1*6
print('Cantidad de electrones calculada:\t', np.trace(W_CH4))

d = W_CH4.diagonal()

print('Cargas efectivas:')

print('Cantidad de electrones del Carbono',6)
print('Q_Carbono:\t', 6 - sum(d[0:5]))# (primeros cinco elementos de la diagonal)

print('Hidrógeno (esperado):',1)
print('Q_Hidrógeno:\t',1-d[8])

print(W_CH4)

fila5 = W_CH4[5,:]

print(fila5)

columna5 = W_CH4[:,5]

print(columna5)

fila8 = W_CH4[8,:]

columna8 = W_CH4[:,8]

W_CH = np.dot(fila5[0:5],columna5[0:5])
W_HH = W_CH4[7,8]*W_CH4[8,7]

print('Grado de enlace:')
print('W_CH\t',W_CH)
print('W_HH\t',W_HH)

print(5*'\n')

#%%

"""
Molécula de H2O
"""

print(20*'=' + '\n \tH2O\n' + 20*'=')

P_H2O = np.array([[2.10787, -0.45539, 0.00000, 0.00000, -0.10813, -0.02245, -0.02245],
     [-0.45539, 2.00677, 0.00000, 0.00000, 0.60590, -0.05513, -0.05513],
     [0.00000, 0.00000, 2.00000, 0.00000, 0.00000, 0.00000, 0.00000],
     [0.00000, 0.00000, 0.00000, 0.75079, 0.00000, -0.55047, 0.55047],
     [0.10813, 0.60590, 0.00000, 0.00000, 1.17291, -0.48430, -0.48430],
     [-0.02245, -0.05513, 0.00000, -0.55047, -0.48430, 0.62625, -0.18095],
     [-0.02245, -0.05513, 0.00000, 0.55047, -0.48430, -0.18095, 0.62625]])

S_H2O = np.array([[1.0, 0.2367, 0.0, 0.0, 0.0, 0.05, 0.05,],
     [0.2367,  1.0,  0.0,  0.0,  0.0,  0.45391,  0.45391],
     [0.0,  0.0,  1.0,  0.0, 0.0, 0.0, 0.0],
     [0.0, 0.0, 0.0, 1.0, 0.0, -0.29272, 0.29272],
     [0.0, 0.0, 0.0, 0.0, 1.0, -0.2455, -0.2455],
     [0.05, 0.45391, 0.0, -0.29272, -0.2455, 1.0, 0.2509],
     [0.05, 0.45391, 0.0, 0.29272, -0.2455, 0.2509, 1.0]])

W_H2O = np.matmul(P_H2O,S_H2O)

print('Cantidad de electrones esperada:\t', 10) # 2*1 + 1*8
print('Cantidad de electrones calculada:\t', np.trace(W_H2O))

d = W_H2O.diagonal()

print('Cargas efectivas:')

print('Cantidad de electrones del Oxígeno',8)
print('Q_Oxígeno:\t', 8 - sum(d[0:5])) # (primeros siete elementos de la diagonal)

print('Hidrógeno (esperado):',1)
print('Q_Hidrógeno:\t',1-d[5])

fila5 = W_H2O[5,:]
columna5 = W_H2O[:,5]

fila6 = W_H2O[6,:]
columna6 = W_H2O[:,6]

W_OH = np.dot(fila5[0:5],columna5[0:5])
W_HH = W_H2O[5,6]*W_H2O[6,5]

print('Grado de enlace:')
print('W_OH\t',W_OH)
print('W_HH\t',W_HH)
